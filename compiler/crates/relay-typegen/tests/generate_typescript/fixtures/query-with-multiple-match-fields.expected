==================================== INPUT ====================================
query Test @raw_response_type {
  node(id: "1") {
    ... on User {
      username
      ...NameRendererFragment
    }
  }
  viewer {
    actor {
      ... on User {
        name
        ...AnotherNameRendererFragment
      }
    }
  }
}

fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment AnotherNameRendererFragment on User {
  name
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}
==================================== OUTPUT ===================================
import { Local3DPayload } from "relay-runtime";
export type TestVariables = {};
export type TestResponse = {
  readonly node?: {
    readonly username?: string,
    readonly " $fragmentRefs": NameRendererFragment$ref,
  },
  readonly viewer?: {
    readonly actor?: {
      readonly name?: string,
      readonly " $fragmentRefs": AnotherNameRendererFragment$ref,
    }
  },
};
export type PlainUserNameRenderer_name = {
  readonly plaintext?: string,
  readonly data?: {
    readonly text?: string,
    readonly id?: string,
  },
};
export type MarkdownUserNameRenderer_name = {
  readonly markdown?: string,
  readonly data?: {
    readonly markup?: string,
    readonly id?: string,
  },
};
export type TestRawResponse = {
  readonly node?: {
    readonly __typename: "User",
    readonly id: string,
    readonly username?: string,
    readonly nameRenderer?: {
      readonly __typename: "PlainUserNameRenderer",
      readonly __module_operation_NameRendererFragment?: any,
      readonly __module_component_NameRendererFragment?: any,
    } | Local3DPayload<"NameRendererFragment", {
      readonly __typename: "PlainUserNameRenderer",
    }> | {
      readonly __typename: "MarkdownUserNameRenderer",
      readonly __module_operation_NameRendererFragment?: any,
      readonly __module_component_NameRendererFragment?: any,
    } | Local3DPayload<"NameRendererFragment", {
      readonly __typename: "MarkdownUserNameRenderer",
    }> | {
      readonly __typename: string
    },
  } | {
    readonly __typename: string,
    readonly id: string,
  },
  readonly viewer?: {
    readonly actor?: {
      readonly __typename: "User",
      readonly id: string,
      readonly name?: string,
      readonly nameRenderer?: {
        readonly __typename: "PlainUserNameRenderer",
        readonly __module_operation_AnotherNameRendererFragment?: any,
        readonly __module_component_AnotherNameRendererFragment?: any,
      } | Local3DPayload<"AnotherNameRendererFragment", {
        readonly __typename: "PlainUserNameRenderer",
      }> | {
        readonly __typename: "MarkdownUserNameRenderer",
        readonly __module_operation_AnotherNameRendererFragment?: any,
        readonly __module_component_AnotherNameRendererFragment?: any,
      } | Local3DPayload<"AnotherNameRendererFragment", {
        readonly __typename: "MarkdownUserNameRenderer",
      }> | {
        readonly __typename: string
      },
    } | {
      readonly __typename: string,
      readonly id: string,
    }
  },
};
export type Test = {
  variables: TestVariables,
  response: TestResponse,
  rawResponse: TestRawResponse,
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type AnotherNameRendererFragment = {
  readonly name?: string,
  readonly nameRenderer?: {
    readonly __fragmentPropName?: string,
    readonly __module_component?: string,
    readonly " $fragmentRefs": PlainUserNameRenderer_name$ref & MarkdownUserNameRenderer_name$ref,
  },
  readonly " $refType": FragmentRefs<"AnotherNameRendererFragment">,
};
export type AnotherNameRendererFragment$data = AnotherNameRendererFragment;
export type AnotherNameRendererFragment$key = {
  readonly " $data"?: AnotherNameRendererFragment$data,
  readonly " $fragmentRefs": FragmentRefs<"AnotherNameRendererFragment">,
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type MarkdownUserNameRenderer_name = {
  readonly markdown?: string,
  readonly data?: {
    readonly markup?: string
  },
  readonly " $refType": FragmentRefs<"MarkdownUserNameRenderer_name">,
};
export type MarkdownUserNameRenderer_name$data = MarkdownUserNameRenderer_name;
export type MarkdownUserNameRenderer_name$key = {
  readonly " $data"?: MarkdownUserNameRenderer_name$data,
  readonly " $fragmentRefs": FragmentRefs<"MarkdownUserNameRenderer_name">,
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type NameRendererFragment = {
  readonly id: string,
  readonly nameRenderer?: {
    readonly __fragmentPropName?: string,
    readonly __module_component?: string,
    readonly " $fragmentRefs": PlainUserNameRenderer_name$ref & MarkdownUserNameRenderer_name$ref,
  },
  readonly " $refType": FragmentRefs<"NameRendererFragment">,
};
export type NameRendererFragment$data = NameRendererFragment;
export type NameRendererFragment$key = {
  readonly " $data"?: NameRendererFragment$data,
  readonly " $fragmentRefs": FragmentRefs<"NameRendererFragment">,
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type PlainUserNameRenderer_name = {
  readonly plaintext?: string,
  readonly data?: {
    readonly text?: string
  },
  readonly " $refType": FragmentRefs<"PlainUserNameRenderer_name">,
};
export type PlainUserNameRenderer_name$data = PlainUserNameRenderer_name;
export type PlainUserNameRenderer_name$key = {
  readonly " $data"?: PlainUserNameRenderer_name$data,
  readonly " $fragmentRefs": FragmentRefs<"PlainUserNameRenderer_name">,
};
