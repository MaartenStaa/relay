==================================== INPUT ====================================
mutation CommentCreateMutation($input: CommentCreateInput!) {
  commentCreate(input: $input) @required(action: LOG) {
    comment @required(action: LOG) {
      id @required(action: LOG)
    }
  }
}
==================================== OUTPUT ===================================
/*
 * future proof enums: false
 * future proof abstract types: false
 */

export type CommentCreateInput = {
  clientMutationId?: string | null,
  feedbackId?: string | null,
  feedback?: CommentfeedbackFeedback | null,
};
export type CommentfeedbackFeedback = {
  comment?: FeedbackcommentComment | null
};
export type FeedbackcommentComment = {
  feedback?: CommentfeedbackFeedback | null
};
export type CommentCreateMutationVariables = {
  input: CommentCreateInput
};
export type CommentCreateMutationResponse = {
  readonly commentCreate: {
    readonly comment: {
      readonly id: string
    }
  }
} | null;
export type CommentCreateMutation = {
  variables: CommentCreateMutationVariables,
  response: CommentCreateMutationResponse,
};
-------------------------------------------------------------------------------
/*
 * future proof enums: true
 * future proof abstract types: false
 */

export type CommentCreateInput = {
  clientMutationId?: string | null,
  feedbackId?: string | null,
  feedback?: CommentfeedbackFeedback | null,
};
export type CommentfeedbackFeedback = {
  comment?: FeedbackcommentComment | null
};
export type FeedbackcommentComment = {
  feedback?: CommentfeedbackFeedback | null
};
export type CommentCreateMutationVariables = {
  input: CommentCreateInput
};
export type CommentCreateMutationResponse = {
  readonly commentCreate: {
    readonly comment: {
      readonly id: string
    }
  }
} | null;
export type CommentCreateMutation = {
  variables: CommentCreateMutationVariables,
  response: CommentCreateMutationResponse,
};
-------------------------------------------------------------------------------
/*
 * future proof enums: false
 * future proof abstract types: true
 */

export type CommentCreateInput = {
  clientMutationId?: string | null,
  feedbackId?: string | null,
  feedback?: CommentfeedbackFeedback | null,
};
export type CommentfeedbackFeedback = {
  comment?: FeedbackcommentComment | null
};
export type FeedbackcommentComment = {
  feedback?: CommentfeedbackFeedback | null
};
export type CommentCreateMutationVariables = {
  input: CommentCreateInput
};
export type CommentCreateMutationResponse = {
  readonly commentCreate: {
    readonly comment: {
      readonly id: string
    }
  }
} | null;
export type CommentCreateMutation = {
  variables: CommentCreateMutationVariables,
  response: CommentCreateMutationResponse,
};
-------------------------------------------------------------------------------
/*
 * future proof enums: true
 * future proof abstract types: true
 */

export type CommentCreateInput = {
  clientMutationId?: string | null,
  feedbackId?: string | null,
  feedback?: CommentfeedbackFeedback | null,
};
export type CommentfeedbackFeedback = {
  comment?: FeedbackcommentComment | null
};
export type FeedbackcommentComment = {
  feedback?: CommentfeedbackFeedback | null
};
export type CommentCreateMutationVariables = {
  input: CommentCreateInput
};
export type CommentCreateMutationResponse = {
  readonly commentCreate: {
    readonly comment: {
      readonly id: string
    }
  }
} | null;
export type CommentCreateMutation = {
  variables: CommentCreateMutationVariables,
  response: CommentCreateMutationResponse,
};
