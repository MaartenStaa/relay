==================================== INPUT ====================================
fragment Foo on Node {
  __typename
  ... on User {
    ... on User {
      name @required(action: LOG)
    }
  }
}
==================================== OUTPUT ===================================
/*
 * future proof enums: false
 * future proof abstract types: false
 */

import { FragmentRefs } from "relay-runtime";
export type Foo = ({
  readonly __typename: "User",
  readonly name: string,
} | {
  readonly __typename: "Comment" | "Feedback" | "Page" | "PhotoStory" | "Story"
}) & {
  readonly " $refType": FragmentRefs<"Foo">
} | null;
export type Foo$data = Foo;
export type Foo$key = {
  readonly " $data"?: Foo$data,
  readonly " $fragmentRefs": FragmentRefs<"Foo">,
};
-------------------------------------------------------------------------------
/*
 * future proof enums: true
 * future proof abstract types: false
 */

import { FragmentRefs } from "relay-runtime";
export type Foo = ({
  readonly __typename: "User",
  readonly name: string,
} | {
  readonly __typename: "Comment" | "Feedback" | "Page" | "PhotoStory" | "Story"
}) & {
  readonly " $refType": FragmentRefs<"Foo">
} | null;
export type Foo$data = Foo;
export type Foo$key = {
  readonly " $data"?: Foo$data,
  readonly " $fragmentRefs": FragmentRefs<"Foo">,
};
-------------------------------------------------------------------------------
/*
 * future proof enums: false
 * future proof abstract types: true
 */

import { FragmentRefs } from "relay-runtime";
export type Foo = ({
  readonly __typename: "User",
  readonly name: string,
} | {
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly __typename: "Comment" | "Feedback" | "Page" | "PhotoStory" | "Story" | "%other"
}) & {
  readonly " $refType": FragmentRefs<"Foo">
} | null;
export type Foo$data = Foo;
export type Foo$key = {
  readonly " $data"?: Foo$data,
  readonly " $fragmentRefs": FragmentRefs<"Foo">,
};
-------------------------------------------------------------------------------
/*
 * future proof enums: true
 * future proof abstract types: true
 */

import { FragmentRefs } from "relay-runtime";
export type Foo = ({
  readonly __typename: "User",
  readonly name: string,
} | {
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly __typename: "Comment" | "Feedback" | "Page" | "PhotoStory" | "Story" | "%other"
}) & {
  readonly " $refType": FragmentRefs<"Foo">
} | null;
export type Foo$data = Foo;
export type Foo$key = {
  readonly " $data"?: Foo$data,
  readonly " $fragmentRefs": FragmentRefs<"Foo">,
};
