==================================== INPUT ====================================
fragment LinkedField on User {
  profilePicture {
    uri
    width
    height
  }
  hometown {
    # object
    id
    profilePicture {
      uri
    }
  }
  actor {
    # interface
    id
  }
}

query UnionTypeTest {
  neverNode {
    __typename
    ... on FakeNode {
      id
    }
  }
}
==================================== OUTPUT ===================================
/*
 * future proof enums: false
 * future proof abstract types: false
 */

export type UnionTypeTestVariables = {};
export type UnionTypeTestResponse = {
  readonly neverNode: {
    readonly __typename: "FakeNode",
    readonly id: string,
  } | {
    readonly __typename: "NonNode"
  } | null
};
export type UnionTypeTest = {
  variables: UnionTypeTestVariables,
  response: UnionTypeTestResponse,
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type LinkedField = {
  readonly profilePicture: {
    readonly uri: string | null,
    readonly width: number | null,
    readonly height: number | null,
  } | null,
  readonly hometown: {
    readonly id: string,
    readonly profilePicture: {
      readonly uri: string | null
    } | null,
  } | null,
  readonly actor: {
    readonly id: string
  } | null,
  readonly " $refType": FragmentRefs<"LinkedField">,
};
export type LinkedField$data = LinkedField;
export type LinkedField$key = {
  readonly " $data"?: LinkedField$data,
  readonly " $fragmentRefs": FragmentRefs<"LinkedField">,
};
-------------------------------------------------------------------------------
/*
 * future proof enums: true
 * future proof abstract types: false
 */

export type UnionTypeTestVariables = {};
export type UnionTypeTestResponse = {
  readonly neverNode: {
    readonly __typename: "FakeNode",
    readonly id: string,
  } | {
    readonly __typename: "NonNode"
  } | null
};
export type UnionTypeTest = {
  variables: UnionTypeTestVariables,
  response: UnionTypeTestResponse,
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type LinkedField = {
  readonly profilePicture: {
    readonly uri: string | null,
    readonly width: number | null,
    readonly height: number | null,
  } | null,
  readonly hometown: {
    readonly id: string,
    readonly profilePicture: {
      readonly uri: string | null
    } | null,
  } | null,
  readonly actor: {
    readonly id: string
  } | null,
  readonly " $refType": FragmentRefs<"LinkedField">,
};
export type LinkedField$data = LinkedField;
export type LinkedField$key = {
  readonly " $data"?: LinkedField$data,
  readonly " $fragmentRefs": FragmentRefs<"LinkedField">,
};
-------------------------------------------------------------------------------
/*
 * future proof enums: false
 * future proof abstract types: true
 */

export type UnionTypeTestVariables = {};
export type UnionTypeTestResponse = {
  readonly neverNode: {
    readonly __typename: "FakeNode",
    readonly id: string,
  } | {
    // This will never be '%other', but we need some
    // value in case none of the concrete values match.
    readonly __typename: "%other"
  } | null
};
export type UnionTypeTest = {
  variables: UnionTypeTestVariables,
  response: UnionTypeTestResponse,
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type LinkedField = {
  readonly profilePicture: {
    readonly uri: string | null,
    readonly width: number | null,
    readonly height: number | null,
  } | null,
  readonly hometown: {
    readonly id: string,
    readonly profilePicture: {
      readonly uri: string | null
    } | null,
  } | null,
  readonly actor: {
    readonly id: string
  } | null,
  readonly " $refType": FragmentRefs<"LinkedField">,
};
export type LinkedField$data = LinkedField;
export type LinkedField$key = {
  readonly " $data"?: LinkedField$data,
  readonly " $fragmentRefs": FragmentRefs<"LinkedField">,
};
-------------------------------------------------------------------------------
/*
 * future proof enums: true
 * future proof abstract types: true
 */

export type UnionTypeTestVariables = {};
export type UnionTypeTestResponse = {
  readonly neverNode: {
    readonly __typename: "FakeNode",
    readonly id: string,
  } | {
    // This will never be '%other', but we need some
    // value in case none of the concrete values match.
    readonly __typename: "%other"
  } | null
};
export type UnionTypeTest = {
  variables: UnionTypeTestVariables,
  response: UnionTypeTestResponse,
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type LinkedField = {
  readonly profilePicture: {
    readonly uri: string | null,
    readonly width: number | null,
    readonly height: number | null,
  } | null,
  readonly hometown: {
    readonly id: string,
    readonly profilePicture: {
      readonly uri: string | null
    } | null,
  } | null,
  readonly actor: {
    readonly id: string
  } | null,
  readonly " $refType": FragmentRefs<"LinkedField">,
};
export type LinkedField$data = LinkedField;
export type LinkedField$key = {
  readonly " $data"?: LinkedField$data,
  readonly " $fragmentRefs": FragmentRefs<"LinkedField">,
};
