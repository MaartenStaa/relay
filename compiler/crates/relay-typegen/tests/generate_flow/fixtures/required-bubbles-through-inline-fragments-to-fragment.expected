==================================== INPUT ====================================
fragment Foo on Node {
  __typename
  ... on User {
    ... on User {
      name @required(action: LOG)
    }
  }
}
==================================== OUTPUT ===================================
/*
 * future proof enums: false
 * future proof abstract types: false
 */

import type { FragmentReference } from "relay-runtime";
declare export opaque type Foo$ref: FragmentReference;
declare export opaque type Foo$fragmentType: Foo$ref;
export type Foo = ?({|
  +__typename: "User",
  +name: string,
  +$refType: Foo$ref,
|} | {|
  +__typename: "Comment" | "Feedback" | "Page" | "PhotoStory" | "Story",
  +$refType: Foo$ref,
|});
export type Foo$data = Foo;
export type Foo$key = {
  +$data?: Foo$data,
  +$fragmentRefs: Foo$ref,
  ...
};
-------------------------------------------------------------------------------
/*
 * future proof enums: true
 * future proof abstract types: false
 */

import type { FragmentReference } from "relay-runtime";
declare export opaque type Foo$ref: FragmentReference;
declare export opaque type Foo$fragmentType: Foo$ref;
export type Foo = ?({|
  +__typename: "User",
  +name: string,
  +$refType: Foo$ref,
|} | {|
  +__typename: "Comment" | "Feedback" | "Page" | "PhotoStory" | "Story",
  +$refType: Foo$ref,
|});
export type Foo$data = Foo;
export type Foo$key = {
  +$data?: Foo$data,
  +$fragmentRefs: Foo$ref,
  ...
};
-------------------------------------------------------------------------------
/*
 * future proof enums: false
 * future proof abstract types: true
 */

import type { FragmentReference } from "relay-runtime";
declare export opaque type Foo$ref: FragmentReference;
declare export opaque type Foo$fragmentType: Foo$ref;
export type Foo = ?({|
  +__typename: "User",
  +name: string,
  +$refType: Foo$ref,
|} | {|
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +__typename: "Comment" | "Feedback" | "Page" | "PhotoStory" | "Story" | "%other",
  +$refType: Foo$ref,
|});
export type Foo$data = Foo;
export type Foo$key = {
  +$data?: Foo$data,
  +$fragmentRefs: Foo$ref,
  ...
};
-------------------------------------------------------------------------------
/*
 * future proof enums: true
 * future proof abstract types: true
 */

import type { FragmentReference } from "relay-runtime";
declare export opaque type Foo$ref: FragmentReference;
declare export opaque type Foo$fragmentType: Foo$ref;
export type Foo = ?({|
  +__typename: "User",
  +name: string,
  +$refType: Foo$ref,
|} | {|
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +__typename: "Comment" | "Feedback" | "Page" | "PhotoStory" | "Story" | "%other",
  +$refType: Foo$ref,
|});
export type Foo$data = Foo;
export type Foo$key = {
  +$data?: Foo$data,
  +$fragmentRefs: Foo$ref,
  ...
};
