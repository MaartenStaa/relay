==================================== INPUT ====================================
mutation Test($input: UpdateAllSeenStateInput) @raw_response_type {
  viewerNotificationsUpdateAllSeenState(input: $input) {
    stories {
      foos {
        bar
      }
    }
  }
}

#%extensions%

extend type Story {
  foos: [Foo]
}

type Foo {
  bar: String
}
==================================== OUTPUT ===================================
/*
 * future proof enums: false
 * future proof abstract types: false
 */

export type UpdateAllSeenStateInput = {|
  clientMutationId?: ?string,
  storyIds?: ?$ReadOnlyArray<?string>,
|};
export type TestVariables = {|
  input?: ?UpdateAllSeenStateInput
|};
export type TestResponse = {|
  +viewerNotificationsUpdateAllSeenState: ?{|
    +stories: ?$ReadOnlyArray<?{|
      +foos: ?$ReadOnlyArray<?{|
        +bar: ?string
      |}>
    |}>
  |}
|};
export type TestRawResponse = {|
  +viewerNotificationsUpdateAllSeenState: ?{|
    +stories: ?$ReadOnlyArray<?{|
      +id: string,
      +foos?: ?$ReadOnlyArray<?{|
        +bar: ?string
      |}>,
    |}>
  |}
|};
export type Test = {|
  variables: TestVariables,
  response: TestResponse,
  rawResponse: TestRawResponse,
|};
-------------------------------------------------------------------------------
/*
 * future proof enums: true
 * future proof abstract types: false
 */

export type UpdateAllSeenStateInput = {|
  clientMutationId?: ?string,
  storyIds?: ?$ReadOnlyArray<?string>,
|};
export type TestVariables = {|
  input?: ?UpdateAllSeenStateInput
|};
export type TestResponse = {|
  +viewerNotificationsUpdateAllSeenState: ?{|
    +stories: ?$ReadOnlyArray<?{|
      +foos: ?$ReadOnlyArray<?{|
        +bar: ?string
      |}>
    |}>
  |}
|};
export type TestRawResponse = {|
  +viewerNotificationsUpdateAllSeenState: ?{|
    +stories: ?$ReadOnlyArray<?{|
      +id: string,
      +foos?: ?$ReadOnlyArray<?{|
        +bar: ?string
      |}>,
    |}>
  |}
|};
export type Test = {|
  variables: TestVariables,
  response: TestResponse,
  rawResponse: TestRawResponse,
|};
-------------------------------------------------------------------------------
/*
 * future proof enums: false
 * future proof abstract types: true
 */

export type UpdateAllSeenStateInput = {|
  clientMutationId?: ?string,
  storyIds?: ?$ReadOnlyArray<?string>,
|};
export type TestVariables = {|
  input?: ?UpdateAllSeenStateInput
|};
export type TestResponse = {|
  +viewerNotificationsUpdateAllSeenState: ?{|
    +stories: ?$ReadOnlyArray<?{|
      +foos: ?$ReadOnlyArray<?{|
        +bar: ?string
      |}>
    |}>
  |}
|};
export type TestRawResponse = {|
  +viewerNotificationsUpdateAllSeenState: ?{|
    +stories: ?$ReadOnlyArray<?{|
      +id: string,
      +foos?: ?$ReadOnlyArray<?{|
        +bar: ?string
      |}>,
    |}>
  |}
|};
export type Test = {|
  variables: TestVariables,
  response: TestResponse,
  rawResponse: TestRawResponse,
|};
-------------------------------------------------------------------------------
/*
 * future proof enums: true
 * future proof abstract types: true
 */

export type UpdateAllSeenStateInput = {|
  clientMutationId?: ?string,
  storyIds?: ?$ReadOnlyArray<?string>,
|};
export type TestVariables = {|
  input?: ?UpdateAllSeenStateInput
|};
export type TestResponse = {|
  +viewerNotificationsUpdateAllSeenState: ?{|
    +stories: ?$ReadOnlyArray<?{|
      +foos: ?$ReadOnlyArray<?{|
        +bar: ?string
      |}>
    |}>
  |}
|};
export type TestRawResponse = {|
  +viewerNotificationsUpdateAllSeenState: ?{|
    +stories: ?$ReadOnlyArray<?{|
      +id: string,
      +foos?: ?$ReadOnlyArray<?{|
        +bar: ?string
      |}>,
    |}>
  |}
|};
export type Test = {|
  variables: TestVariables,
  response: TestResponse,
  rawResponse: TestRawResponse,
|};
