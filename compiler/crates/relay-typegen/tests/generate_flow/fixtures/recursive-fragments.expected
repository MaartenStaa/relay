==================================== INPUT ====================================
fragment FragmentSpread on Node {
  id
  ... @include(if: $condition) {
    ...FragmentSpread
  }
}
==================================== OUTPUT ===================================
/*
 * future proof enums: false
 * future proof abstract types: false
 */

import type { FragmentReference } from "relay-runtime";
declare export opaque type FragmentSpread$ref: FragmentReference;
declare export opaque type FragmentSpread$fragmentType: FragmentSpread$ref;
export type FragmentSpread = {|
  +id: string,
  +$fragmentRefs: FragmentSpread$ref,
  +$refType: FragmentSpread$ref,
|};
export type FragmentSpread$data = FragmentSpread;
export type FragmentSpread$key = {
  +$data?: FragmentSpread$data,
  +$fragmentRefs: FragmentSpread$ref,
  ...
};
-------------------------------------------------------------------------------
/*
 * future proof enums: true
 * future proof abstract types: false
 */

import type { FragmentReference } from "relay-runtime";
declare export opaque type FragmentSpread$ref: FragmentReference;
declare export opaque type FragmentSpread$fragmentType: FragmentSpread$ref;
export type FragmentSpread = {|
  +id: string,
  +$fragmentRefs: FragmentSpread$ref,
  +$refType: FragmentSpread$ref,
|};
export type FragmentSpread$data = FragmentSpread;
export type FragmentSpread$key = {
  +$data?: FragmentSpread$data,
  +$fragmentRefs: FragmentSpread$ref,
  ...
};
-------------------------------------------------------------------------------
/*
 * future proof enums: false
 * future proof abstract types: true
 */

import type { FragmentReference } from "relay-runtime";
declare export opaque type FragmentSpread$ref: FragmentReference;
declare export opaque type FragmentSpread$fragmentType: FragmentSpread$ref;
export type FragmentSpread = {|
  +id: string,
  +$fragmentRefs: FragmentSpread$ref,
  +$refType: FragmentSpread$ref,
|};
export type FragmentSpread$data = FragmentSpread;
export type FragmentSpread$key = {
  +$data?: FragmentSpread$data,
  +$fragmentRefs: FragmentSpread$ref,
  ...
};
-------------------------------------------------------------------------------
/*
 * future proof enums: true
 * future proof abstract types: true
 */

import type { FragmentReference } from "relay-runtime";
declare export opaque type FragmentSpread$ref: FragmentReference;
declare export opaque type FragmentSpread$fragmentType: FragmentSpread$ref;
export type FragmentSpread = {|
  +id: string,
  +$fragmentRefs: FragmentSpread$ref,
  +$refType: FragmentSpread$ref,
|};
export type FragmentSpread$data = FragmentSpread;
export type FragmentSpread$key = {
  +$data?: FragmentSpread$data,
  +$fragmentRefs: FragmentSpread$ref,
  ...
};
